// Copyright by Barry G. Becker, 2013. Licensed under MIT License: http://www.opensource.org/licenses/MIT

description = 'A game playing framework and a collection of two-player and multi-player games. ' +
        'In all games, one or more intelligent computer opponents are allowed to play.'
group = 'com.barrybecker4'
version = '1.1.2-SNAPSHOT'
apply from: 'https://raw.github.com/barrybecker4/bb4-common/master/bb4.gradle'
project.archivesBaseName = 'bb4-game-common'
mainClassName = "com.barrybecker4.game.common.ui.GameApp"
ext.gameApp = 'com.barrybecker4.game.common.ui.GameApp'

dependencies {
    compile 'com.barrybecker4:bb4-sound:1.1.2-SNAPSHOT'
    compile 'com.barrybecker4:bb4-optimization:1.1.2-SNAPSHOT'
    compile 'com.barrybecker4:bb4-sgf:1.1'

    // jars needed for go
    compile fileTree(dir: 'lib', include: '*.jar')
}

task runGalactic(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "galactic", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runPente(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "pente", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runTicTacToe(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "tictactoe", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runBlockade(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "blockade", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runCheckers(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "checkers", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runChess(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "chess", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runSet(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "set", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runGo(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "go", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runGoJapanese(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "go", "-locale", "JAPANESE"]
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-ea"]   // in gradle 1.7 default  jvmArgs can be set with applicationDefaultJvmArgs
}


task runKgsTesujisoftGoClient(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.game.twoplayer.go.GtpKgsTesujisoftGoClient'
    classpath = sourceSets.main.runtimeClasspath
}

/*
task runGoGui(type: JavaExec, depends: classes) {
    main = 'gogui.Main'
    args = ["arg1", "-program", "arg2", "${java_compiler} -ea -classpath ${classesDir};${libDir}/gogui7.1.jar com.barrybecker4.game.twoplayer.go.server.GtpTesujisoftGoServer"]
    classpath = sourceSets.main.runtimeClasspath
}     */

task runTrivial(type: JavaExec, depends: classes) {
    main = gameApp
    args = ["-name", "trivial", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runTrivialServer(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.game.common.online.ui.OnlineGameServerFrame'
    args = ["-game", "trivial"]
    classpath = sourceSets.main.runtimeClasspath
}

/*
task runTrivialServerAndClients(type: JavaExec, depends: classes) {
    tasks.runTrivialServer.execute()
    tasks.runTrivial.execute()
    tasks.runTrivial.execute()
    tasks.runTrivial.execute()
}  */

task runPoker(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.game.common.ui.GameApp'
    args = ["-name", "poker", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

task runPokerServer(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.game.common.online.ui.OnlineGameServerFrame'
    args = ["-game", "poker", "-locale", "ENGLISH"]
    classpath = sourceSets.main.runtimeClasspath
}

/*
task runPokerServerAndClients(type: JavaExec, depends: classes) {
    tasks.runPokerServer.execute()
    tasks.runPoker.execute()
    tasks.runPoker.execute()
    tasks.runPoker.execute()
} */

 /*
  <target name="executeTrivialServerAndClients" depends="compile" description="Run online trivial server and several clients">
      <parallel>
          <antcall target="executeTrivialServer"/>
          <sequential>
              <sleep seconds="1" />
              <antcall target="executeTrivial"/>
          </sequential>
          <!--
           <sequential>
              <sleep seconds="2"/>
              <antcall target="executeTrivial"/>
          </sequential-->
          <!--sequential>
              <sleep seconds="3"/>
              <antcall target="executeTrivial"/>
          </sequential-->
      </parallel>
  </target>


  <target name="executePoker" depends="compile" description="Run poker card game app">
    <antcall target="executeProgram">
      <param name="className" value="${gameAppClass}"/>
      <param name="libPath" value="${libDir}/jai-codec-1.1.3.jar;"/>
      <param name="args" value="-name poker -locale ENGLISH"/>
    </antcall>
  </target>

   <target name="executePokerServer" depends="compile" description="Run online poker server">
    <antcall target="executeProgram">
      <param name="className" value="com.barrybecker4.game.common.online.ui.OnlineGameServerFrame"/>
      <param name="libPath" value="${libDir}/jai-codec-1.1.3.jar;"/>
      <param name="args" value="-game poker -locale ENGLISH"/>
    </antcall>
  </target>

  <target name="executePokerServerAndClients" depends="compile" description="Run online poker server and several clients">
      <parallel>
          <antcall target="executePokerServer"/>
          <sequential>
              <sleep seconds="1" />
              <antcall target="executePoker"/>
          </sequential>
           <sequential>
              <sleep seconds="2"/>
              <antcall target="executePoker"/>
          </sequential>
          <!--sequential>
              <sleep seconds="3"/>
              <antcall target="executePoker"/>
          </sequential-->
      </parallel>
  </target>


  <target name="kgsTesujisoftGoClient" depends="compile" description="run the Tesujisoft Go engine on KGS.">
     <antcall target="executeProgram">
      <param name="className" value="com.barrybecker4.game.twoplayer.go.GtpKgsTesujisoftGoClient"/>
      <param name="libPath" value="${libDir}/kgsGtp.jar;${libDir}/gogui7.1.jar"/>
    </antcall>
  </target>

  <target name="GoGui" depends="compile">
    <antcall target="executeProgram2">
      <param name="className" value="gogui.Main"/>
      <param name="libPath" value="${libDir}/gogui7.1.jar"/>
      <param name="arg1" value="-program"/>
      <param name="arg2" value="${java_compiler} -ea -classpath ${classesDir};${libDir}/gogui7.1.jar com.barrybecker4.game.twoplayer.go.server.GtpTesujisoftGoServer"/>
    </antcall>
  </target>
  */

task gameCommonJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/common/**'
    include 'com/barrybecker4/game/card/**'
    include 'com/barrybecker4/game/*.xml'
    baseName = 'bb4-game-common'
    manifest {
        attributes 'Implementation-Title': 'Game common code',
            'Implementation-Version': version,
            provider: 'gradle',
            'Main-Class': mainClassName
    }
}

task twoPlayerCommonJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/twoplayer/common/**'
    baseName = 'bb4-twoplayer-common'
    manifest {
        attributes 'Implementation-Title': 'Two Player Game common code',
            'Implementation-Version': version,
            provider: 'gradle',
            'Main-Class': mainClassName
    }
}

task multiPlayerCommonJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/multiplayer/common/**'
    baseName = 'bb4-multiplayer-common'
    manifest {
        attributes 'Implementation-Title': 'Multi-Player Game common code',
            'Implementation-Version': version,
            provider: 'gradle',
            'Main-Class': mainClassName
    }
}

task cardJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/card/**'
    baseName = 'bb4-card'
}
task blockadeJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/twoplayer/blockade/**'
    baseName = 'bb4-blockade'
}
// note that chess and checkers are combined because chess extends checkers
task chessJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/twoplayer/chess/**'
    include 'com/barrybecker4/game/twoplayer/checkers/**'
    baseName = 'bb4-chess'
}
task goJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/twoplayer/go/**'
    baseName = 'bb4-go'
}
task penteJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/twoplayer/pente/**'
    baseName = 'bb4-pente'
}
task tictactoeJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/twoplayer/tictactoe/**'
    baseName = 'bb4-tictactoe'
}
task galacticJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/multiplayer/galactic/**'
    baseName = 'bb4-galactic'
}
task pokerJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/multiplayer/poker/**'
    baseName = 'bb4-poker'
}
task setJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/multiplayer/set/**'
    baseName = 'bb4-set'
}
task trivialJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/game/multiplayer/trivial/**'
    baseName = 'bb4-trivial'
}

// skip building the default jar that contains everything
jar { enabled = false }

ext.jarTasks = [
    gameCommonJar, twoPlayerCommonJar, multiPlayerCommonJar, cardJar,
    blockadeJar, chessJar, goJar, penteJar, tictactoeJar, galacticJar,
    pokerJar, setJar, trivialJar, sourcesJar, javadocJar
]

apply from: 'https://raw.github.com/barrybecker4/bb4-common/master/bb4-publish.gradle'